version: 2.1

parameters:
  imageName:
    type: string
    default: ""
  imageTag:
    type: string
    default: ""
  setLatest:
    description: defines if the latest tag should be set to this version
    type: boolean
    default: false

# -----------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------

workflows:

  release-image:
    when:
      and:
        - not:
            # avoid that it automatically triggers on push
            equal: [ "", << pipeline.parameters.imageName >> ]
    jobs:
      - job-build-arm64:
          name: dockware/<< pipeline.parameters.imageName >>:<< pipeline.parameters.imageTag >>-arm-64
          imageName: << pipeline.parameters.imageName >>
          imageTag: << pipeline.parameters.imageTag >>
      # ------------------------------------------------------------------------------------
      - job-build-amd64:
          name: dockware/<< pipeline.parameters.imageName >>:<< pipeline.parameters.imageTag >>-amd-64
          imageName: << pipeline.parameters.imageName >>
          imageTag: << pipeline.parameters.imageTag >>
      # ------------------------------------------------------------------------------------
      - job-update-manifest:
          name: update-manifest
          imageName: << pipeline.parameters.imageName >>
          imageTag: << pipeline.parameters.imageTag >>
          setLatest: << pipeline.parameters.setLatest >>
          requires:
            - dockware/<< pipeline.parameters.imageName >>:<< pipeline.parameters.imageTag >>-arm-64
            - dockware/<< pipeline.parameters.imageName >>:<< pipeline.parameters.imageTag >>-amd-64

# -----------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------

executors:
  ubuntu-executor:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: true


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:

  job-build-arm64:
      executor: ubuntu-executor
      resource_class: arm.medium
      parameters:
        imageName:
          type: string
        imageTag:
          type: string
      steps:
          - checkout
          - cmd_install
          - cmd_image_build_push:
              imageName: <<parameters.imageName>>
              imageTag: <<parameters.imageTag>>
              imageArch: "arm64"

  job-build-amd64:
      executor: ubuntu-executor
      resource_class: medium
      parameters:
          imageName:
            type: string
          imageTag:
            type: string
      steps:
          - checkout
          - cmd_install
          - cmd_image_build_push:
              imageName: << parameters.imageName >>
              imageTag: << parameters.imageTag >>
              imageArch: "amd64"

  job-update-manifest:
      executor: ubuntu-executor
      resource_class: medium
      parameters:
          imageName:
            type: string
          imageTag:
            type: string
          setLatest:
            type: boolean
      steps:
          # ------------------------------------------------------------------------------------
          - run:
              name: Docker Hub Login
              command: |
                echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
          # ------------------------------------------------------------------------------------
          - run:
              name: Create and push manifest (<< parameters.imageTag >>)
              command: |
                docker manifest create dockware/<< parameters.imageName >>:<< parameters.imageTag >> --amend dockware/<< parameters.imageName >>:<< parameters.imageTag >>-amd64 --amend dockware/<< parameters.imageName >>:<< parameters.imageTag >>-arm64
                docker manifest push dockware/<< parameters.imageName >>:<< parameters.imageTag >>
          # ------------------------------------------------------------------------------------
          - run:
              name: Create and push manifest (latest)
              command: |
                if [ << parameters.setLatest >> = true ]; then
                  docker manifest create dockware/<< parameters.imageName >>:latest --amend dockware/<< parameters.imageName >>:<< parameters.imageTag >>-amd64 --amend dockware/<< parameters.imageName >>:<< parameters.imageTag >>-arm64
                  docker manifest push dockware/<< parameters.imageName >>:latest
                fi

# -----------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------

# these are shared commands for arm64 and amd64 jobs
commands:

  cmd_install:
    steps:
      - restore_cache:
          key: vendor-cache
          paths:
            - vendor
      - run: sudo apt-get update
      - run: sudo apt-get install -y software-properties-common
      - run: sudo add-apt-repository ppa:ondrej/php -y
      - run: sudo apt-get update
      - run: sudo apt-get install -y php8.2 php8.2-cli php8.2-xml unzip
      - run: php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
      - run: php composer-setup.php
      - run: sudo mv composer.phar /usr/local/bin/composer
      # ------------------------------------------------------------------------------------
      - run: make install
      - save_cache:
          key: vendor-cache
          paths:
            - vendor

  cmd_image_build_push:
    parameters:
      imageName:
        type: string
      imageTag:
        type: string
      imageArch:
        type: string
    steps:
      # ------------------------------------------------------------------------------------
      - run:
          name: Build Image web:<< parameters.imageTag >>
          command: |
            make build version=<< parameters.imageTag >> -B
      # ------------------------------------------------------------------------------------
      - run:
          name: Run SVRUnit Tests
          command: |
            make svrunit version=<< parameters.imageTag >> -B
      - store_test_results:
          path: .reports
      - store_artifacts:
          path: .reports/report.xml
          destination: svrunit.xml
        # ------------------------------------------------------------------------------------
      - run:
          name: Run Cypress Tests
          command: |
            make cypress version=<< parameters.imageTag >>
      # ------------------------------------------------------------------------------------
      - run:
          name: Docker Hub Login
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Tag Image for ARCH
          command: |
            docker tag dockware/<< parameters.imageName >>:<< parameters.imageTag >> dockware/<< parameters.imageName >>:<< parameters.imageTag >>-<< parameters.imageArch >>
      - run:
          name: Push Image
          command: |
            docker push dockware/<< parameters.imageName >>:<< parameters.imageTag >>-<< parameters.imageArch >>